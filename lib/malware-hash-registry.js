var net = require('net');

var REGISTRY_HOST = 'hash.cymru.com';
var REGISTRY_PORT = 43;

/**
 * <b>Team Cymru's Malware Hash Registry Client</b>.
 * @constructor
 * @author Chad Bibler (https://chadbibler.com)
 */
var MalwareHashRegistry = function () {
  this.registryOptions = {
    host: REGISTRY_HOST,
    port: REGISTRY_PORT
  };
};

MalwareHashRegistry.prototype.query = function (digests, callback) {
  var that = this;
  var client = net.connect(this.registryOptions);
  client.setEncoding('utf8');

  client.on('connect', function () {
    var request = that._generateRequest(digests);
    client.write(request);
  });

  client.on('data', function (response) {
    var results = that._handleResponse(response, callback);
    callback(null, results);
  });

  client.on('error', function (err) {
    callback(err, null);
  });
};

MalwareHashRegistry.prototype._generateRequest = function (digests) {
  var request = '';

  request += 'begin\r\n';
  digests.forEach(function (digest) {
    request += digest + '\r\n';
  });
  request += 'end\r\n';

  return request;
};

MalwareHashRegistry.prototype._handleResponse = function (response) {
  var lines = response.split('\n');
  return this._processResponseLines(lines);
};

MalwareHashRegistry.prototype._processResponseLine = function (line) {
  // if we send a digest that isn't an MD5 or SHA-1, the response
  // will contain an error message
  var invalidDigestMessage = 'Error: no md5 or sha1 hash match';

  if (line.length === 0) { return; }
  if (line[0] === '#') { return; }
  if (line.indexOf(invalidDigestMessage) === 0) { return; }

  var resultChunks = line.split(' ');
  var digest = resultChunks[0];
  var timestamp = this._parseAndConvertTimestamp(resultChunks[1]);
  var detectionRate = this._parseDetectionRate(resultChunks[2]);

  if (typeof detectionRate !== 'number') {
    timestamp = null;
  }

  return {
    digest: digest,
    timestamp: timestamp,
    detectionRate: detectionRate
  };
};

MalwareHashRegistry.prototype._parseDetectionRate = function (detectionRateField) {
  var detectionRateNumber;

  if (detectionRateField === 'NO_DATA') { return null; }

  detectionRateNumber = parseInt(detectionRateField, 10);
  if (Number.isNaN(detectionRateNumber)) { return null; }

  return detectionRateNumber;
};

MalwareHashRegistry.prototype._parseAndConvertTimestamp = function (timestampField) {
  var timestamp = parseInt(timestampField, 10);
  if (Number.isNaN(timestamp)) { return null; }
  // the MHR's timestamp is seconds since the epoch, but JavaScript
  // timestamps are milliseconds since the epoch
  return timestamp * 1000;
};

MalwareHashRegistry.prototype._processResponseLines = function (lines) {
  var results = {};
  var that = this;

  lines.forEach(function (line) {
    var result = that._processResponseLine(line);
    if (result) {
      results[result.digest] = {
        timestamp: result.timestamp,
        detectionRate: result.detectionRate
      };
    }
  });

  return results;
};

module.exports = MalwareHashRegistry;
